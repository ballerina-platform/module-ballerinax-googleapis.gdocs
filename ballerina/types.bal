// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# A color that can either be fully opaque or fully transparent.
public type OptionalColor record {
    # If set, this will be used as an opaque color. If unset, this represents a transparent color.
    Color color?;
};

# A ParagraphElement describes content within a Paragraph.
public type ParagraphElement record {
    # An auto text paragraph element.
    AutoText autoText?;
    # A column break paragraph element.
    ColumnBreak columnBreak?;
    # The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
    int:Signed32 endIndex?;
    # An equation paragraph element.
    Equation equation?;
    # A footnote reference paragraph element.
    FootnoteReference footnoteReference?;
    # A horizontal rule paragraph element.
    HorizontalRule horizontalRule?;
    # An inline object paragraph element.
    InlineObjectElement inlineObjectElement?;
    # A page break paragraph element.
    PageBreak pageBreak?;
    # A paragraph element that links to a person or email address.
    Person person?;
    # A paragraph element that links to a Google resource (such as a file in Google Drive, a YouTube video, or a Calendar event.)
    RichLink richLink?;
    # The zero-based start index of this paragraph element, in UTF-16 code units.
    int:Signed32 startIndex?;
    # A text run paragraph element.
    TextRun textRun?;
};

# The styling that applies to a section.
public type SectionStyle record {
    # The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
    SectionColumnProperties[] columnProperties?;
    # The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    "COLUMN_SEPARATOR_STYLE_UNSPECIFIED"|"NONE"|"BETWEEN_EACH_COLUMN" columnSeparatorStyle?;
    # The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    "CONTENT_DIRECTION_UNSPECIFIED"|"LEFT_TO_RIGHT"|"RIGHT_TO_LEFT" contentDirection?;
    # The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
    string defaultFooterId?;
    # The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
    string defaultHeaderId?;
    # The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
    string evenPageFooterId?;
    # The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
    string evenPageHeaderId?;
    # The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
    string firstPageFooterId?;
    # The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
    string firstPageHeaderId?;
    # The bottom page margin of the section. If unset, the value defaults to margin_bottom from DocumentStyle. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginBottom?;
    # The footer margin of the section. If unset, the value defaults to margin_footer from DocumentStyle. If updated, use_custom_header_footer_margins is set to true on DocumentStyle. The value of use_custom_header_footer_margins on DocumentStyle indicates if a footer margin is being respected for this section When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginFooter?;
    # The header margin of the section. If unset, the value defaults to margin_header from DocumentStyle. If updated, use_custom_header_footer_margins is set to true on DocumentStyle. The value of use_custom_header_footer_margins on DocumentStyle indicates if a header margin is being respected for this section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginHeader?;
    # The left page margin of the section. If unset, the value defaults to margin_left from DocumentStyle. Updating the left margin causes columns in this section to resize. Since the margin affects column width, it's applied before column properties. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginLeft?;
    # The right page margin of the section. If unset, the value defaults to margin_right from DocumentStyle. Updating the right margin causes columns in this section to resize. Since the margin affects column width, it's applied before column properties. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginRight?;
    # The top page margin of the section. If unset, the value defaults to margin_top from DocumentStyle. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    Dimension marginTop?;
    # The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    int:Signed32 pageNumberStart?;
    # Output only. The type of section.
    "SECTION_TYPE_UNSPECIFIED"|"CONTINUOUS"|"NEXT_PAGE" sectionType?;
    # Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
    boolean useFirstPageHeaderFooter?;
};

# Location of a single cell within a table.
public type TableCellLocation record {
    # The zero-based column index. For example, the second column in the table has a column index of 1.
    int:Signed32 columnIndex?;
    # The zero-based row index. For example, the second row in the table has a row index of 1.
    int:Signed32 rowIndex?;
    # The location where the table starts in the document.
    Location tableStartLocation?;
};

# A width and height.
public type Size record {
    # The height of the object.
    Dimension height?;
    # The width of the object.
    Dimension width?;
};

# A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
public type AutoText record {
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. An AutoText may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this AutoText, keyed by suggestion ID.
    record {|SuggestedTextStyle...;|} suggestedTextStyleChanges?;
    # The text style of this AutoText.
    TextStyle textStyle?;
    # The type of this auto text.
    "TYPE_UNSPECIFIED"|"PAGE_NUMBER"|"PAGE_COUNT" 'type?;
};

# A criteria that matches a specific string of text in the document.
public type SubstringMatchCriteria record {
    # Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
    boolean matchCase?;
    # The text to search for in the document.
    string text?;
};

# Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
public type ParagraphStyle record {
    # The text alignment for this paragraph.
    "ALIGNMENT_UNSPECIFIED"|"START"|"CENTER"|"END"|"JUSTIFIED" alignment?;
    # Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
    boolean avoidWidowAndOrphan?;
    # The border between this paragraph and the next and previous paragraphs. If unset, the value is inherited from the parent. The between border is rendered when the adjacent paragraph has the same border and indent properties. Paragraph borders cannot be partially updated. When changing a paragraph border, the new border must be specified in its entirety.
    ParagraphBorder borderBetween?;
    # The border at the bottom of this paragraph. If unset, the value is inherited from the parent. The bottom border is rendered when the paragraph below has different border and indent properties. Paragraph borders cannot be partially updated. When changing a paragraph border, the new border must be specified in its entirety.
    ParagraphBorder borderBottom?;
    # The border to the left of this paragraph. If unset, the value is inherited from the parent. Paragraph borders cannot be partially updated. When changing a paragraph border, the new border must be specified in its entirety.
    ParagraphBorder borderLeft?;
    # The border to the right of this paragraph. If unset, the value is inherited from the parent. Paragraph borders cannot be partially updated. When changing a paragraph border, the new border must be specified in its entirety.
    ParagraphBorder borderRight?;
    # The border at the top of this paragraph. If unset, the value is inherited from the parent. The top border is rendered when the paragraph above has different border and indent properties. Paragraph borders cannot be partially updated. When changing a paragraph border, the new border must be specified in its entirety.
    ParagraphBorder borderTop?;
    # The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
    "CONTENT_DIRECTION_UNSPECIFIED"|"LEFT_TO_RIGHT"|"RIGHT_TO_LEFT" direction?;
    # The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
    string headingId?;
    # The amount of indentation for the paragraph on the side that corresponds to the end of the text, based on the current paragraph direction. If unset, the value is inherited from the parent.
    Dimension indentEnd?;
    # The amount of indentation for the first line of the paragraph. If unset, the value is inherited from the parent.
    Dimension indentFirstLine?;
    # The amount of indentation for the paragraph on the side that corresponds to the start of the text, based on the current paragraph direction. If unset, the value is inherited from the parent.
    Dimension indentStart?;
    # Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
    boolean keepLinesTogether?;
    # Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
    boolean keepWithNext?;
    # The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
    float lineSpacing?;
    # The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
    "NAMED_STYLE_TYPE_UNSPECIFIED"|"NORMAL_TEXT"|"TITLE"|"SUBTITLE"|"HEADING_1"|"HEADING_2"|"HEADING_3"|"HEADING_4"|"HEADING_5"|"HEADING_6" namedStyleType?;
    # Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
    boolean pageBreakBefore?;
    # The shading of the paragraph. If unset, the value is inherited from the parent.
    Shading shading?;
    # The amount of extra space above the paragraph. If unset, the value is inherited from the parent.
    Dimension spaceAbove?;
    # The amount of extra space below the paragraph. If unset, the value is inherited from the parent.
    Dimension spaceBelow?;
    # The spacing mode for the paragraph.
    "SPACING_MODE_UNSPECIFIED"|"NEVER_COLLAPSE"|"COLLAPSE_LISTS" spacingMode?;
    # A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
    TabStop[] tabStops?;
};

# A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type ImagePropertiesSuggestionState record {
    # Indicates if there was a suggested change to angle.
    boolean angleSuggested?;
    # Indicates if there was a suggested change to brightness.
    boolean brightnessSuggested?;
    # Indicates if there was a suggested change to content_uri.
    boolean contentUriSuggested?;
    # Indicates if there was a suggested change to contrast.
    boolean contrastSuggested?;
    # A mask that indicates which of the fields in crop_properties have been changed in this suggestion.
    CropPropertiesSuggestionState cropPropertiesSuggestionState?;
    # Indicates if there was a suggested change to source_uri.
    boolean sourceUriSuggested?;
    # Indicates if there was a suggested change to transparency.
    boolean transparencySuggested?;
};

# A StructuralElement representing a table of contents.
public type TableOfContents record {
    # The content of the table of contents.
    StructuralElement[] content?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
};

# A Google Docs document.
public type Document record {
    # Output only. The main body of the document.
    Body body?;
    # Output only. The ID of the document.
    string documentId?;
    # Output only. The style of the document.
    DocumentStyle documentStyle?;
    # Output only. The footers in the document, keyed by footer ID.
    record {} footers?;
    # Output only. The footnotes in the document, keyed by footnote ID.
    record {|Footnote...;|} footnotes?;
    # Output only. The headers in the document, keyed by header ID.
    record {|Header...;|} headers?;
    # Output only. The inline objects in the document, keyed by object ID.
    record {|InlineObject...;|} inlineObjects?;
    # Output only. The lists in the document, keyed by list ID.
    record {|List...;|} lists?;
    # Output only. The named ranges in the document, keyed by name.
    record {} namedRanges?;
    # Output only. The named styles of the document.
    NamedStyles namedStyles?;
    # Output only. The positioned objects in the document, keyed by object ID.
    record {|PositionedObject...;|} positionedObjects?;
    # Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
    string revisionId?;
    # Output only. The suggested changes to the style of the document, keyed by suggestion ID.
    record {|SuggestedDocumentStyle...;|} suggestedDocumentStyleChanges?;
    # Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
    record {|SuggestedNamedStyles...;|} suggestedNamedStylesChanges?;
    # Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
    "DEFAULT_FOR_CURRENT_ACCESS"|"SUGGESTIONS_INLINE"|"PREVIEW_SUGGESTIONS_ACCEPTED"|"PREVIEW_WITHOUT_SUGGESTIONS" suggestionsViewMode?;
    # The title of the document.
    string title?;
};

# Update the styling of all paragraphs that overlap with the given range.
public type UpdateParagraphStyleRequest record {
    # The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
    string fields?;
    # The styles to set on the paragraphs. Certain paragraph style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of ParagraphStyle for more information.
    ParagraphStyle paragraphStyle?;
    # The range overlapping the paragraphs to style.
    Range range?;
};

# A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
public type PageBreak record {
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this PageBreak, keyed by suggestion ID.
    record {} suggestedTextStyleChanges?;
    # The text style of this PageBreak. Similar to text content, like text runs and footnote references, the text style of a page break can affect content layout as well as the styling of text inserted next to it.
    TextStyle textStyle?;
};

# A ParagraphElement representing a horizontal line.
public type HorizontalRule record {
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this HorizontalRule, keyed by suggestion ID.
    record {} suggestedTextStyleChanges?;
    # The text style of this HorizontalRule. Similar to text content, like text runs and footnote references, the text style of a horizontal rule can affect content layout as well as the styling of text inserted next to it.
    TextStyle textStyle?;
};

# A suggested change to a TableRowStyle.
public type SuggestedTableRowStyle record {
    # A TableRowStyle that only includes the changes made in this suggestion. This can be used along with the table_row_style_suggestion_state to see which fields have changed and their new values.
    TableRowStyle tableRowStyle?;
    # A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion.
    TableRowStyleSuggestionState tableRowStyleSuggestionState?;
};

# Updates the style of a range of table cells.
public type UpdateTableCellStyleRequest record {
    # The fields that should be updated. At least one field must be specified. The root `tableCellStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background color, set `fields` to `"backgroundColor"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
    string fields?;
    # The style to set on the table cells. When updating borders, if a cell shares a border with an adjacent cell, the corresponding border property of the adjacent cell is updated as well. Borders that are merged and invisible are not updated. Since updating a border shared by adjacent cells in the same request can cause conflicting border updates, border updates are applied in the following order: - `border_right` - `border_left` - `border_bottom` - `border_top`
    TableCellStyle tableCellStyle?;
    # The table range representing the subset of the table to which the updates are applied.
    TableRange tableRange?;
    # The location where the table starts in the document. When specified, the updates are applied to all the cells in the table.
    Location tableStartLocation?;
};

# The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
public type CropProperties record {
    # The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
    float angle?;
    # The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
    float offsetBottom?;
    # The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
    float offsetLeft?;
    # The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
    float offsetRight?;
    # The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
    float offsetTop?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type EmbeddedObjectSuggestionState record {
    # Indicates if there was a suggested change to description.
    boolean descriptionSuggested?;
    # A mask that indicates which of the fields in embedded_drawing_properties have been changed in this suggestion.
    EmbeddedDrawingPropertiesSuggestionState embeddedDrawingPropertiesSuggestionState?;
    # A mask that indicates which of the fields in embedded_object_border have been changed in this suggestion.
    EmbeddedObjectBorderSuggestionState embeddedObjectBorderSuggestionState?;
    # A mask that indicates which of the fields in image_properties have been changed in this suggestion.
    ImagePropertiesSuggestionState imagePropertiesSuggestionState?;
    # A mask that indicates which of the fields in linked_content_reference have been changed in this suggestion.
    LinkedContentReferenceSuggestionState linkedContentReferenceSuggestionState?;
    # Indicates if there was a suggested change to margin_bottom.
    boolean marginBottomSuggested?;
    # Indicates if there was a suggested change to margin_left.
    boolean marginLeftSuggested?;
    # Indicates if there was a suggested change to margin_right.
    boolean marginRightSuggested?;
    # Indicates if there was a suggested change to margin_top.
    boolean marginTopSuggested?;
    # A mask that indicates which of the fields in size have been changed in this suggestion.
    SizeSuggestionState sizeSuggestionState?;
    # Indicates if there was a suggested change to title.
    boolean titleSuggested?;
};

# A suggested change to PositionedObjectProperties.
public type SuggestedPositionedObjectProperties record {
    # A PositionedObjectProperties that only includes the changes made in this suggestion. This can be used along with the positioned_object_properties_suggestion_state to see which fields have changed and their new values.
    PositionedObjectProperties positionedObjectProperties?;
    # A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion.
    PositionedObjectPropertiesSuggestionState positionedObjectPropertiesSuggestionState?;
};

# A mask that indicates which of the fields on the base PositionedObjectPositioning have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type PositionedObjectPositioningSuggestionState record {
    # Indicates if there was a suggested change to layout.
    boolean layoutSuggested?;
    # Indicates if there was a suggested change to left_offset.
    boolean leftOffsetSuggested?;
    # Indicates if there was a suggested change to top_offset.
    boolean topOffsetSuggested?;
};

# A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
public type FootnoteReference record {
    # The ID of the footnote that contains the content of this footnote reference.
    string footnoteId?;
    # The rendered number of this footnote.
    string footnoteNumber?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this FootnoteReference, keyed by suggestion ID.
    record {} suggestedTextStyleChanges?;
    # The text style of this FootnoteReference.
    TextStyle textStyle?;
};

# Represents the background of a document.
public type Background record {
    # The background color.
    OptionalColor color?;
};

# A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
public type ColumnBreak record {
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this ColumnBreak, keyed by suggestion ID.
    record {|SuggestedTextStyle...;|} suggestedTextStyleChanges?;
    # The text style of this ColumnBreak. Similar to text content, like text runs and footnote references, the text style of a column break can affect content layout as well as the styling of text inserted next to it.
    TextStyle textStyle?;
};

# The shading of a paragraph.
public type Shading record {
    # The background color of this paragraph shading.
    OptionalColor backgroundColor?;
};

# A reference to the external linked source content.
public type LinkedContentReference record {
    # A reference to the linked chart.
    SheetsChartReference sheetsChartReference?;
};

# Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
public type ReplaceImageRequest record {
    # The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
    string imageObjectId?;
    # The replacement method.
    "IMAGE_REPLACE_METHOD_UNSPECIFIED"|"CENTER_CROP" imageReplaceMethod?;
    # The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can't surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.
    string uri?;
};

# The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
public type ListProperties record {
    # Describes the properties of the bullets at the associated level. A list has at most 9 levels of nesting with nesting level 0 corresponding to the top-most level and nesting level 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
    NestingLevel[] nestingLevels?;
};

# The suggestion state of a NamedStyles message.
public type NamedStylesSuggestionState record {
    # A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.
    NamedStyleSuggestionState[] stylesSuggestionStates?;
};

# A document header.
public type Header record {
    # The contents of the header. The indexes for a header's content begin at zero.
    StructuralElement[] content?;
    # The ID of the header.
    string headerId?;
};

# Deletes a PositionedObject from the document.
public type DeletePositionedObjectRequest record {
    # The ID of the positioned object to delete.
    string objectId?;
};

# The result of inserting an inline image.
public type InsertInlineImageResponse record {
    # The ID of the created InlineObject.
    string objectId?;
};

# Inserts a page break followed by a newline at the specified location.
public type InsertPageBreakRequest record {
    # Inserts the page break at the end of the document body. Page breaks cannot be inserted inside a footnote, header or footer. Since page breaks can only be inserted inside the body, the segment ID field must be empty.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts the page break at a specific index in the document. The page break must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between the table and its preceding paragraph). Page breaks cannot be inserted inside a table, equation, footnote, header or footer. Since page breaks can only be inserted inside the body, the segment ID field must be empty.
    Location location?;
};

# The contents and style of a row in a Table.
public type TableRow record {
    # The zero-based end index of this row, exclusive, in UTF-16 code units.
    int:Signed32 endIndex?;
    # The zero-based start index of this row, in UTF-16 code units.
    int:Signed32 startIndex?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested style changes to this row, keyed by suggestion ID.
    record {|SuggestedTableRowStyle...;|} suggestedTableRowStyleChanges?;
    # The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
    TableCell[] tableCells?;
    # The style of the table row.
    TableRowStyle tableRowStyle?;
};

# The properties of an image.
public type ImageProperties record {
    # The clockwise rotation angle of the image, in radians.
    float angle?;
    # The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
    float brightness?;
    # A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
    string contentUri?;
    # The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
    float contrast?;
    # The crop properties of the image.
    CropProperties cropProperties?;
    # The source URI is the URI used to insert the image. The source URI can be empty.
    string sourceUri?;
    # The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
    float transparency?;
};

# Properties specific to a linked Person.
public type PersonProperties record {
    # Output only. The email address linked to this Person. This field is always present.
    string email?;
    # Output only. The name of the person if it's displayed in the link text instead of the person's email address.
    string name?;
};

# A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
public type Person record {
    # Output only. The unique ID of this link.
    string personId?;
    # Output only. The properties of this Person. This field is always present.
    PersonProperties personProperties?;
    # IDs for suggestions that remove this person link from the document. A Person might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
    string[] suggestedDeletionIds?;
    # IDs for suggestions that insert this person link into the document. A Person might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this Person, keyed by suggestion ID.
    record {|SuggestedTextStyle...;|} suggestedTextStyleChanges?;
    # The text style of this Person.
    TextStyle textStyle?;
};

# A reference to another portion of a document or an external URL resource.
public type Link record {
    # The ID of a bookmark in this document.
    string bookmarkId?;
    # The ID of a heading in this document.
    string headingId?;
    # An external URL.
    string url?;
};

# Deletes a Header from the document.
public type DeleteHeaderRequest record {
    # The id of the header to delete. If this header is defined on DocumentStyle, the reference to this header is removed, resulting in no header of that type for the first section of the document. If this header is defined on a SectionStyle, the reference to this header is removed and the header of that type is now continued from the previous section.
    string headerId?;
};

# Creates a Footnote segment and inserts a new FootnoteReference to it at the given location. The new Footnote segment will contain a space followed by a newline character.
public type CreateFootnoteRequest record {
    # Inserts the footnote reference at the end of the document body. Footnote references cannot be inserted inside a header, footer or footnote. Since footnote references can only be inserted in the body, the segment ID field must be empty.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts the footnote reference at a specific index in the document. The footnote reference must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between the table and its preceding paragraph). Footnote references cannot be inserted inside an equation, header, footer or footnote. Since footnote references can only be inserted in the body, the segment ID field must be empty.
    Location location?;
};

# Represents a font family and weight of text.
public type WeightedFontFamily record {
    # The font family of the text. The font family can be any font from the Font menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
    string fontFamily?;
    # The weight of the font. This field can have any value that's a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. The default value is `400` ("normal"). The font weight makes up just one component of the rendered font weight. A combination of the `weight` and the text style's resolved `bold` value determine the rendered weight, after accounting for inheritance: * If the text is bold and the weight is less than `400`, the rendered weight is 400. * If the text is bold and the weight is greater than or equal to `400` but is less than `700`, the rendered weight is `700`. * If the weight is greater than or equal to `700`, the rendered weight is equal to the weight. * If the text is not bold, the rendered weight is equal to the weight.
    int:Signed32 weight?;
};

# Unmerges cells in a Table.
public type UnmergeTableCellsRequest record {
    # The table range specifying which cells of the table to unmerge. All merged cells in this range will be unmerged, and cells that are already unmerged will not be affected. If the range has no merged cells, the request will do nothing. If there is text in any of the merged cells, the text will remain in the "head" cell of the resulting block of unmerged cells. The "head" cell is the upper-left cell when the content direction is from left to right, and the upper-right otherwise.
    TableRange tableRange?;
};

# Inserts a table at the specified location. A newline character will be inserted before the inserted table.
public type InsertTableRequest record {
    # The number of columns in the table.
    int:Signed32 columns?;
    # Inserts the table at the end of the given header, footer or document body. A newline character will be inserted before the inserted table. Tables cannot be inserted inside a footnote.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts the table at a specific model index. A newline character will be inserted before the inserted table, therefore the table start index will be at the specified location index + 1. The table must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between an existing table and its preceding paragraph). Tables cannot be inserted inside a footnote or equation.
    Location location?;
    # The number of rows in the table.
    int:Signed32 rows?;
};

# A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
public type TableRange record {
    # The column span of the table range.
    int:Signed32 columnSpan?;
    # The row span of the table range.
    int:Signed32 rowSpan?;
    # The cell location where the table range starts.
    TableCellLocation tableCellLocation?;
};

# A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
public type RichLink record {
    # Output only. The ID of this link.
    string richLinkId?;
    # Output only. The properties of this RichLink. This field is always present.
    RichLinkProperties richLinkProperties?;
    # IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
    string[] suggestedDeletionIds?;
    # IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this RichLink, keyed by suggestion ID.
    record {|SuggestedTextStyle...;|} suggestedTextStyleChanges?;
    # The text style of this RichLink.
    TextStyle textStyle?;
};

# Deletes a row from a table.
public type DeleteTableRowRequest record {
    # The reference table cell location from which the row will be deleted. The row this cell spans will be deleted. If this is a merged cell that spans multiple rows, all rows that the cell spans will be deleted. If no rows remain in the table after this deletion, the whole table is deleted.
    TableCellLocation tableCellLocation?;
};

# A ParagraphElement that represents a run of text that all has the same styling.
public type TextRun record {
    # The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907.
    string content?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A TextRun may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this run, keyed by suggestion ID.
    record {|SuggestedTextStyle...;|} suggestedTextStyleChanges?;
    # The text style of this run.
    TextStyle textStyle?;
};

# The style of the document.
public type DocumentStyle record {
    # The background of the document. Documents cannot have a transparent background color.
    Background background?;
    # The ID of the default footer. If not set, there's no default footer. This property is read-only.
    string defaultFooterId?;
    # The ID of the default header. If not set, there's no default header. This property is read-only.
    string defaultHeaderId?;
    # The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.
    string evenPageFooterId?;
    # The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.
    string evenPageHeaderId?;
    # The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.
    string firstPageFooterId?;
    # The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.
    string firstPageHeaderId?;
    # The bottom page margin. Updating the bottom page margin on the document style clears the bottom page margin on all section styles.
    Dimension marginBottom?;
    # The amount of space between the bottom of the page and the contents of the footer.
    Dimension marginFooter?;
    # The amount of space between the top of the page and the contents of the header.
    Dimension marginHeader?;
    # The left page margin. Updating the left page margin on the document style clears the left page margin on all section styles. It may also cause columns to resize in all sections.
    Dimension marginLeft?;
    # The right page margin. Updating the right page margin on the document style clears the right page margin on all section styles. It may also cause columns to resize in all sections.
    Dimension marginRight?;
    # The top page margin. Updating the top page margin on the document style clears the top page margin on all section styles.
    Dimension marginTop?;
    # The page number from which to start counting the number of pages.
    int:Signed32 pageNumberStart?;
    # The size of a page in the document.
    Size pageSize?;
    # Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
    boolean useCustomHeaderFooterMargins?;
    # Indicates whether to use the even page header / footer IDs for the even pages.
    boolean useEvenPageHeaderFooter?;
    # Indicates whether to use the first page header / footer IDs for the first page.
    boolean useFirstPageHeaderFooter?;
};

# Inserts a section break at the given location. A newline character will be inserted before the section break.
public type InsertSectionBreakRequest record {
    # Inserts a newline and a section break at the end of the document body. Section breaks cannot be inserted inside a footnote, header or footer. Because section breaks can only be inserted inside the body, the segment ID field must be empty.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts a newline and a section break at a specific index in the document. The section break must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between the table and its preceding paragraph). Section breaks cannot be inserted inside a table, equation, footnote, header, or footer. Since section breaks can only be inserted inside the body, the segment ID field must be empty.
    Location location?;
    # The type of section to insert.
    "SECTION_TYPE_UNSPECIFIED"|"CONTINUOUS"|"NEXT_PAGE" sectionType?;
};

# An RGB color.
public type RgbColor record {
    # The blue component of the color, from 0.0 to 1.0.
    float blue?;
    # The green component of the color, from 0.0 to 1.0.
    float green?;
    # The red component of the color, from 0.0 to 1.0.
    float red?;
};

# Updates the TableColumnProperties of columns in a table.
public type UpdateTableColumnPropertiesRequest record {
    # The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.
    int:Signed32[] columnIndices?;
    # The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"width"`.
    string fields?;
    # The table column properties to update. If the value of `table_column_properties#width` is less than 5 points (5/72 inch), a 400 bad request error is returned.
    TableColumnProperties tableColumnProperties?;
    # The location where the table starts in the document.
    Location tableStartLocation?;
};

# Update the styling of text.
public type UpdateTextStyleRequest record {
    # The fields that should be updated. At least one field must be specified. The root `text_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
    string fields?;
    # The range of text to style. The range may be extended to include adjacent newlines. If the range fully contains a paragraph belonging to a list, the paragraph's bullet is also updated with the matching text style. Ranges cannot be inserted inside a relative UpdateTextStyleRequest.
    Range range?;
    # The styles to set on the text. If the value for a particular style matches that of the parent, that style will be set to inherit. Certain text style changes may cause other changes in order to to mirror the behavior of the Docs editor. See the documentation of TextStyle for more information.
    TextStyle textStyle?;
};

# Updates the SectionStyle.
public type UpdateSectionStyleRequest record {
    # The fields that should be updated. At least one field must be specified. The root `section_style` is implied and must not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the left margin, set `fields` to `"margin_left"`.
    string fields?;
    # The range overlapping the sections to style. Because section breaks can only be inserted inside the body, the segment ID field must be empty.
    Range range?;
    # The styles to be set on the section. Certain section style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of SectionStyle for more information.
    SectionStyle sectionStyle?;
};

# A suggested change to a TextStyle.
public type SuggestedTextStyle record {
    # A TextStyle that only includes the changes made in this suggestion. This can be used along with the text_style_suggestion_state to see which fields have changed and their new values.
    TextStyle textStyle?;
    # A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion.
    TextStyleSuggestionState textStyleSuggestionState?;
};

# Creates a Header. The new header is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a header of the specified type already exists, a 400 bad request error is returned.
public type CreateHeaderRequest record {
    # The location of the SectionBreak which begins the section this header should belong to. If `section_break_location` is unset or if it refers to the first section break in the document body, the header applies to the DocumentStyle
    Location sectionBreakLocation?;
    # The type of header to create.
    "HEADER_FOOTER_TYPE_UNSPECIFIED"|"DEFAULT" 'type?;
};

# Describes the bullet of a paragraph.
public type Bullet record {
    # The ID of the list this paragraph belongs to.
    string listId?;
    # The nesting level of this paragraph in the list.
    int:Signed32 nestingLevel?;
    # The paragraph-specific text style applied to this bullet.
    TextStyle textStyle?;
};

# The properties of a column in a table.
public type TableColumnProperties record {
    # The width of the column. Set when the column's `width_type` is FIXED_WIDTH.
    Dimension width?;
    # The width type of the column.
    "WIDTH_TYPE_UNSPECIFIED"|"EVENLY_DISTRIBUTED"|"FIXED_WIDTH" widthType?;
};

# Deletes a Footer from the document.
public type DeleteFooterRequest record {
    # The id of the footer to delete. If this footer is defined on DocumentStyle, the reference to this footer is removed, resulting in no footer of that type for the first section of the document. If this footer is defined on a SectionStyle, the reference to this footer is removed and the footer of that type is now continued from the previous section.
    string footerId?;
};

# A StructuralElement representing a table.
public type Table record {
    # Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.
    int:Signed32 columns?;
    # Number of rows in the table.
    int:Signed32 rows?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The contents and style of each row.
    TableRow[] tableRows?;
    # The style of the table.
    TableStyle tableStyle?;
};

# Represents the Queries record for the operation: docsDocumentsCreate
public type DocsDocumentsCreateQueries record {
    # OAuth access token.
    string access_token?;
    # Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    string quotaUser?;
    # V1 error format.
    "1"|"2" \$\.xgafv?;
    # Upload protocol for media (e.g. "raw", "multipart").
    string upload_protocol?;
    # Returns response with indentations and line breaks.
    boolean prettyPrint?;
    # OAuth 2.0 token for the current user.
    string oauth_token?;
    # Data format for response.
    "json"|"media"|"proto" alt?;
    # Legacy upload protocol for media (e.g. "media", "multipart").
    string uploadType?;
    # JSONP
    string callback?;
    # Selector specifying which fields to include in a partial response.
    string fields?;
    # API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    string 'key?;
};

# Creates a Footer. The new footer is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a footer of the specified type already exists, a 400 bad request error is returned.
public type CreateFooterRequest record {
    # The location of the SectionBreak immediately preceding the section whose SectionStyle this footer should belong to. If this is unset or refers to the first section break in the document, the footer applies to the document style.
    Location sectionBreakLocation?;
    # The type of footer to create.
    "HEADER_FOOTER_TYPE_UNSPECIFIED"|"DEFAULT" 'type?;
};

# Styles that apply to a table row.
public type TableRowStyle record {
    # The minimum height of the row. The row will be rendered in the Docs editor at a height equal to or greater than this value in order to show all the content in the row's cells.
    Dimension minRowHeight?;
    # Whether the row cannot overflow across page or column boundaries.
    boolean preventOverflow?;
    # Whether the row is a table header.
    boolean tableHeader?;
};

# A named style. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from this named style when they have the same named style type.
public type NamedStyle record {
    # The type of this named style.
    "NAMED_STYLE_TYPE_UNSPECIFIED"|"NORMAL_TEXT"|"TITLE"|"SUBTITLE"|"HEADING_1"|"HEADING_2"|"HEADING_3"|"HEADING_4"|"HEADING_5"|"HEADING_6" namedStyleType?;
    # The paragraph style of this named style.
    ParagraphStyle paragraphStyle?;
    # The text style of this named style.
    TextStyle textStyle?;
};

# A mask that indicates which of the fields on the base Background have been changed in this suggestion. For any field set to true, the Backgound has a new suggested value.
public type BackgroundSuggestionState record {
    # Indicates whether the current background color has been modified in this suggestion.
    boolean backgroundColorSuggested?;
};

# Inserts an empty row into a table.
public type InsertTableRowRequest record {
    # Whether to insert new row below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
    boolean insertBelow?;
    # The reference table cell location from which rows will be inserted. A new row will be inserted above (or below) the row where the reference cell is. If the reference cell is a merged cell, a new row will be inserted above (or below) the merged cell.
    TableCellLocation tableCellLocation?;
};

# Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
public type ReplaceNamedRangeContentRequest record {
    # The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned.
    string namedRangeId?;
    # The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no named ranges with the given name, then the request will be a no-op.
    string namedRangeName?;
    # Replaces the content of the specified named range(s) with the given text.
    string text?;
};

# A magnitude in a single direction in the specified units.
public type Dimension record {
    # The magnitude.
    decimal magnitude?;
    # The units for magnitude.
    "UNIT_UNSPECIFIED"|"PT" unit?;
};

# A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type TextStyleSuggestionState record {
    # Indicates if there was a suggested change to background_color.
    boolean backgroundColorSuggested?;
    # Indicates if there was a suggested change to baseline_offset.
    boolean baselineOffsetSuggested?;
    # Indicates if there was a suggested change to bold.
    boolean boldSuggested?;
    # Indicates if there was a suggested change to font_size.
    boolean fontSizeSuggested?;
    # Indicates if there was a suggested change to foreground_color.
    boolean foregroundColorSuggested?;
    # Indicates if there was a suggested change to italic.
    boolean italicSuggested?;
    # Indicates if there was a suggested change to link.
    boolean linkSuggested?;
    # Indicates if there was a suggested change to small_caps.
    boolean smallCapsSuggested?;
    # Indicates if there was a suggested change to strikethrough.
    boolean strikethroughSuggested?;
    # Indicates if there was a suggested change to underline.
    boolean underlineSuggested?;
    # Indicates if there was a suggested change to weighted_font_family.
    boolean weightedFontFamilySuggested?;
};

# A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type EmbeddedDrawingPropertiesSuggestionState record {
};

# A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type PositionedObjectPropertiesSuggestionState record {
    # A mask that indicates which of the fields in embedded_object have been changed in this suggestion.
    EmbeddedObjectSuggestionState embeddedObjectSuggestionState?;
    # A mask that indicates which of the fields in positioning have been changed in this suggestion.
    PositionedObjectPositioningSuggestionState positioningSuggestionState?;
};

# Deletes a column from a table.
public type DeleteTableColumnRequest record {
    # The reference table cell location from which the column will be deleted. The column this cell spans will be deleted. If this is a merged cell that spans multiple columns, all columns that the cell spans will be deleted. If no columns remain in the table after this deletion, the whole table is deleted.
    TableCellLocation tableCellLocation?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# The result of creating a footnote.
public type CreateFootnoteResponse record {
    # The ID of the created footnote.
    string footnoteId?;
};

# A mask that indicates which of the fields on the base Shading have been changed in this suggested change. For any field set to true, there's a new suggested value.
public type ShadingSuggestionState record {
    # Indicates if there was a suggested change to the Shading.
    boolean backgroundColorSuggested?;
};

# A mask that indicates which of the fields on the base SheetsChartReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type SheetsChartReferenceSuggestionState record {
    # Indicates if there was a suggested change to chart_id.
    boolean chartIdSuggested?;
    # Indicates if there was a suggested change to spreadsheet_id.
    boolean spreadsheetIdSuggested?;
};

# Provides control over how write requests are executed.
public type WriteControl record {
    # The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
    string requiredRevisionId?;
    # The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.
    string targetRevisionId?;
};

# Replaces all instances of text matching a criteria with replace text.
public type ReplaceAllTextRequest record {
    # Finds text in the document matching this substring.
    SubstringMatchCriteria containsText?;
    # The text that will replace the matched text.
    string replaceText?;
};

# Inserts an empty column into a table.
public type InsertTableColumnRequest record {
    # Whether to insert new column to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
    boolean insertRight?;
    # The reference table cell location from which columns will be inserted. A new column will be inserted to the left (or right) of the column where the reference cell is. If the reference cell is a merged cell, a new column will be inserted to the left (or right) of the merged cell.
    TableCellLocation tableCellLocation?;
};

# A tab stop within a paragraph.
public type TabStop record {
    # The alignment of this tab stop. If unset, the value defaults to START.
    "TAB_STOP_ALIGNMENT_UNSPECIFIED"|"START"|"CENTER"|"END" alignment?;
    # The offset between this tab stop and the start margin.
    Dimension offset?;
};

# A suggested change to a TableCellStyle.
public type SuggestedTableCellStyle record {
    # A TableCellStyle that only includes the changes made in this suggestion. This can be used along with the table_cell_style_suggestion_state to see which fields have changed and their new values.
    TableCellStyle tableCellStyle?;
    # A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion.
    TableCellStyleSuggestionState tableCellStyleSuggestionState?;
};

# A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type TableRowStyleSuggestionState record {
    # Indicates if there was a suggested change to min_row_height.
    boolean minRowHeightSuggested?;
};

# Updates the TableRowStyle of rows in a table.
public type UpdateTableRowStyleRequest record {
    # The fields that should be updated. At least one field must be specified. The root `tableRowStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`.
    string fields?;
    # The list of zero-based row indices whose style should be updated. If no indices are specified, all rows will be updated.
    int:Signed32[] rowIndices?;
    # The styles to be set on the rows.
    TableRowStyle tableRowStyle?;
    # The location where the table starts in the document.
    Location tableStartLocation?;
};

# A border around an EmbeddedObject.
public type EmbeddedObjectBorder record {
    # The color of the border.
    OptionalColor color?;
    # The dash style of the border.
    "DASH_STYLE_UNSPECIFIED"|"SOLID"|"DOT"|"DASH" dashStyle?;
    # The property state of the border property.
    "RENDERED"|"NOT_RENDERED" propertyState?;
    # The width of the border.
    Dimension width?;
};

# Updates the number of pinned table header rows in a table.
public type PinTableHeaderRowsRequest record {
    # The number of table rows to pin, where 0 implies that all rows are unpinned.
    int:Signed32 pinnedHeaderRowsCount?;
    # The location where the table starts in the document.
    Location tableStartLocation?;
};

# A StructuralElement describes content that provides structure to the document.
public type StructuralElement record {
    # The zero-based end index of this structural element, exclusive, in UTF-16 code units.
    int:Signed32 endIndex?;
    # A paragraph type of structural element.
    Paragraph paragraph?;
    # A section break type of structural element.
    SectionBreak sectionBreak?;
    # The zero-based start index of this structural element, in UTF-16 code units.
    int:Signed32 startIndex?;
    # A table type of structural element.
    Table 'table?;
    # A table of contents type of structural element.
    TableOfContents tableOfContents?;
};

# Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
public type TextStyle record {
    # The background color of the text. If set, the color is either an RGB color or transparent, depending on the `color` field.
    OptionalColor backgroundColor?;
    # The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
    "BASELINE_OFFSET_UNSPECIFIED"|"NONE"|"SUPERSCRIPT"|"SUBSCRIPT" baselineOffset?;
    # Whether or not the text is rendered as bold.
    boolean bold?;
    # The size of the text's font.
    Dimension fontSize?;
    # The foreground color of the text. If set, the color is either an RGB color or transparent, depending on the `color` field.
    OptionalColor foregroundColor?;
    # Whether or not the text is italicized.
    boolean italic?;
    # The hyperlink destination of the text. If unset, there's no link. Links are not inherited from parent text. Changing the link in an update request causes some other changes to the text style of the range: * When setting a link, the text foreground color will be updated to the default link color and the text will be underlined. If these fields are modified in the same request, those values will be used instead of the link defaults. * Setting a link on a text range that overlaps with an existing link will also update the existing link to point to the new URL. * Links are not settable on newline characters. As a result, setting a link on a text range that crosses a paragraph boundary, such as `"ABC\n123"`, will separate the newline character(s) into their own text runs. The link will be applied separately to the runs before and after the newline. * Removing a link will update the text style of the range to match the style of the preceding text (or the default text styles if the preceding text is another link) unless different styles are being set in the same request.
    Link link?;
    # Whether or not the text is in small capital letters.
    boolean smallCaps?;
    # Whether or not the text is struck through.
    boolean strikethrough?;
    # Whether or not the text is underlined.
    boolean underline?;
    # The font family and rendered weight of the text. If an update request specifies values for both `weighted_font_family` and `bold`, the `weighted_font_family` is applied first, then `bold`. If `weighted_font_family#weight` is not set, it defaults to `400`. If `weighted_font_family` is set, then `weighted_font_family#font_family` must also be set with a non-empty value. Otherwise, a 400 bad request error is returned.
    WeightedFontFamily weightedFontFamily?;
};

# Properties of a PositionedObject.
public type PositionedObjectProperties record {
    # The embedded object of this positioned object.
    EmbeddedObject embeddedObject?;
    # The positioning of this positioned object relative to the newline of the Paragraph that references this positioned object.
    PositionedObjectPositioning positioning?;
};

# Deletes content from the document.
public type DeleteContentRangeRequest record {
    # The range of content to delete. Deleting text that crosses a paragraph boundary may result in changes to paragraph styles, lists, positioned objects and bookmarks as the two paragraphs are merged. Attempting to delete certain ranges can result in an invalid document structure in which case a 400 bad request error is returned. Some examples of invalid delete requests include: * Deleting one code unit of a surrogate pair. * Deleting the last newline character of a Body, Header, Footer, Footnote, TableCell or TableOfContents. * Deleting the start or end of a Table, TableOfContents or Equation without deleting the entire element. * Deleting the newline character before a Table, TableOfContents or SectionBreak without deleting the element. * Deleting individual rows or cells of a table. Deleting the content within a table cell is allowed.
    Range range?;
};

# A List represents the list attributes for a group of paragraphs that all belong to the same list. A paragraph that's part of a list has a reference to the list's ID in its bullet.
public type List record {
    # The properties of the list.
    ListProperties listProperties?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this list.
    string[] suggestedDeletionIds?;
    # The suggested insertion ID. If empty, then this is not a suggested insertion.
    string suggestedInsertionId?;
    # The suggested changes to the list properties, keyed by suggestion ID.
    record {} suggestedListPropertiesChanges?;
};

# Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
public type CreateParagraphBulletsRequest record {
    # The kinds of bullet glyphs to be used.
    "BULLET_GLYPH_PRESET_UNSPECIFIED"|"BULLET_DISC_CIRCLE_SQUARE"|"BULLET_DIAMONDX_ARROW3D_SQUARE"|"BULLET_CHECKBOX"|"BULLET_ARROW_DIAMOND_DISC"|"BULLET_STAR_CIRCLE_SQUARE"|"BULLET_ARROW3D_CIRCLE_SQUARE"|"BULLET_LEFTTRIANGLE_DIAMOND_DISC"|"BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"|"BULLET_DIAMOND_CIRCLE_SQUARE"|"NUMBERED_DECIMAL_ALPHA_ROMAN"|"NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS"|"NUMBERED_DECIMAL_NESTED"|"NUMBERED_UPPERALPHA_ALPHA_ROMAN"|"NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL"|"NUMBERED_ZERODECIMAL_ALPHA_ROMAN" bulletPreset?;
    # The range to apply the bullet preset to.
    Range range?;
};

# A suggested change to the DocumentStyle.
public type SuggestedDocumentStyle record {
    # A DocumentStyle that only includes the changes made in this suggestion. This can be used along with the document_style_suggestion_state to see which fields have changed and their new values.
    DocumentStyle documentStyle?;
    # A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion.
    DocumentStyleSuggestionState documentStyleSuggestionState?;
};

# Properties of an InlineObject.
public type InlineObjectProperties record {
    # The embedded object of this inline object.
    EmbeddedObject embeddedObject?;
};

# A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value.
public type SizeSuggestionState record {
    # Indicates if there was a suggested change to height.
    boolean heightSuggested?;
    # Indicates if there was a suggested change to width.
    boolean widthSuggested?;
};

# The result of creating a header.
public type CreateHeaderResponse record {
    # The ID of the created header.
    string headerId?;
};

# A solid color.
public type Color record {
    # The RGB color value.
    RgbColor rgbColor?;
};

# Inserts text at the specified location.
public type InsertTextRequest record {
    # Inserts the text at the end of a header, footer, footnote or the document body.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts the text at a specific index in the document. Text must be inserted inside the bounds of an existing Paragraph. For instance, text cannot be inserted at a table's start index (i.e. between the table and its preceding paragraph). The text must be inserted in the preceding paragraph.
    Location location?;
    # The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
    string text?;
};

# The result of inserting an embedded Google Sheets chart.
public type InsertInlineSheetsChartResponse record {
    # The object ID of the inserted chart.
    string objectId?;
};

# Specifies a contiguous range of text.
public type Range record {
    # The zero-based end index of this range, exclusive, in UTF-16 code units. In all current uses, an end index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
    int:Signed32 endIndex?;
    # The ID of the header, footer, or footnote that this range is contained in. An empty segment ID signifies the document's body.
    string segmentId?;
    # The zero-based start index of this range, in UTF-16 code units. In all current uses, a start index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
    int:Signed32 startIndex?;
};

# The result of creating a named range.
public type CreateNamedRangeResponse record {
    # The ID of the created named range.
    string namedRangeId?;
};

# Represents the Queries record for the operation: docsDocumentsGet
public type DocsDocumentsGetQueries record {
    # OAuth access token.
    string access_token?;
    # Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    string quotaUser?;
    # V1 error format.
    "1"|"2" \$\.xgafv?;
    # Upload protocol for media (e.g. "raw", "multipart").
    string upload_protocol?;
    # Returns response with indentations and line breaks.
    boolean prettyPrint?;
    # OAuth 2.0 token for the current user.
    string oauth_token?;
    # The suggestions view mode to apply to the document. This allows viewing the document with all suggestions inline, accepted or rejected. If one is not specified, DEFAULT_FOR_CURRENT_ACCESS is used.
    "DEFAULT_FOR_CURRENT_ACCESS"|"SUGGESTIONS_INLINE"|"PREVIEW_SUGGESTIONS_ACCEPTED"|"PREVIEW_WITHOUT_SUGGESTIONS" suggestionsViewMode?;
    # Data format for response.
    "json"|"media"|"proto" alt?;
    # Legacy upload protocol for media (e.g. "media", "multipart").
    string uploadType?;
    # JSONP
    string callback?;
    # Selector specifying which fields to include in a partial response.
    string fields?;
    # API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    string 'key?;
};

# An object that appears inline with text. An InlineObject contains an EmbeddedObject such as an image.
public type InlineObject record {
    # The properties of this inline object.
    InlineObjectProperties inlineObjectProperties?;
    # The ID of this inline object. Can be used to update an object’s properties.
    string objectId?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested changes to the inline object properties, keyed by suggestion ID.
    record {} suggestedInlineObjectPropertiesChanges?;
    # The suggested insertion ID. If empty, then this is not a suggested insertion.
    string suggestedInsertionId?;
};

# A reference to a linked chart embedded from Google Sheets.
public type SheetsChartReference record {
    # The ID of the specific chart in the Google Sheets spreadsheet that's embedded.
    int:Signed32 chartId?;
    # The ID of the Google Sheets spreadsheet that contains the source chart.
    string spreadsheetId?;
};

# Properties that apply to a section's column.
public type SectionColumnProperties record {
    # The padding at the end of the column.
    Dimension paddingEnd?;
    # Output only. The width of the column.
    Dimension width?;
};

# Creates a NamedRange referencing the given range.
public type CreateNamedRangeRequest record {
    # The name of the NamedRange. Names do not need to be unique. Names must be at least 1 character and no more than 256 characters, measured in UTF-16 code units.
    string name?;
    # The range to apply the name to.
    Range range?;
};

# The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
public type TableCellStyle record {
    # The background color of the cell.
    OptionalColor backgroundColor?;
    # The bottom border of the cell.
    TableCellBorder borderBottom?;
    # The left border of the cell.
    TableCellBorder borderLeft?;
    # The right border of the cell.
    TableCellBorder borderRight?;
    # The top border of the cell.
    TableCellBorder borderTop?;
    # The column span of the cell. This property is read-only.
    int:Signed32 columnSpan?;
    # The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
    "CONTENT_ALIGNMENT_UNSPECIFIED"|"CONTENT_ALIGNMENT_UNSUPPORTED"|"TOP"|"MIDDLE"|"BOTTOM" contentAlignment?;
    # The bottom padding of the cell.
    Dimension paddingBottom?;
    # The left padding of the cell.
    Dimension paddingLeft?;
    # The right padding of the cell.
    Dimension paddingRight?;
    # The top padding of the cell.
    Dimension paddingTop?;
    # The row span of the cell. This property is read-only.
    int:Signed32 rowSpan?;
};

# Response message from a BatchUpdateDocument request.
public type BatchUpdateDocumentResponse record {
    # The ID of the document to which the updates were applied to.
    string documentId?;
    # The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
    Response[] replies?;
    # The updated write control after applying the request.
    WriteControl writeControl?;
};

# A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type TableCellStyleSuggestionState record {
    # Indicates if there was a suggested change to background_color.
    boolean backgroundColorSuggested?;
    # Indicates if there was a suggested change to border_bottom.
    boolean borderBottomSuggested?;
    # Indicates if there was a suggested change to border_left.
    boolean borderLeftSuggested?;
    # Indicates if there was a suggested change to border_right.
    boolean borderRightSuggested?;
    # Indicates if there was a suggested change to border_top.
    boolean borderTopSuggested?;
    # Indicates if there was a suggested change to column_span.
    boolean columnSpanSuggested?;
    # Indicates if there was a suggested change to content_alignment.
    boolean contentAlignmentSuggested?;
    # Indicates if there was a suggested change to padding_bottom.
    boolean paddingBottomSuggested?;
    # Indicates if there was a suggested change to padding_left.
    boolean paddingLeftSuggested?;
    # Indicates if there was a suggested change to padding_right.
    boolean paddingRightSuggested?;
    # Indicates if there was a suggested change to padding_top.
    boolean paddingTopSuggested?;
    # Indicates if there was a suggested change to row_span.
    boolean rowSpanSuggested?;
};

# A ParagraphElement that contains an InlineObject.
public type InlineObjectElement record {
    # The ID of the InlineObject this element contains.
    string inlineObjectId?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested text style changes to this InlineObject, keyed by suggestion ID.
    record {} suggestedTextStyleChanges?;
    # The text style of this InlineObjectElement. Similar to text content, like text runs and footnote references, the text style of an inline object element can affect content layout as well as the styling of text inserted next to it.
    TextStyle textStyle?;
};

# A suggested change to the NamedStyles.
public type SuggestedNamedStyles record {
    # A NamedStyles that only includes the changes made in this suggestion. This can be used along with the named_styles_suggestion_state to see which fields have changed and their new values.
    NamedStyles namedStyles?;
    # A mask that indicates which of the fields on the base NamedStyles have been changed in this suggestion.
    NamedStylesSuggestionState namedStylesSuggestionState?;
};

# The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
public type EmbeddedDrawingProperties record {
};

# An object that's tethered to a Paragraph and positioned relative to the beginning of the paragraph. A PositionedObject contains an EmbeddedObject such as an image.
public type PositionedObject record {
    # The ID of this positioned object.
    string objectId?;
    # The properties of this positioned object.
    PositionedObjectProperties positionedObjectProperties?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion ID. If empty, then this is not a suggested insertion.
    string suggestedInsertionId?;
    # The suggested changes to the positioned object properties, keyed by suggestion ID.
    record {|SuggestedPositionedObjectProperties...;|} suggestedPositionedObjectPropertiesChanges?;
};

# The result of creating a footer.
public type CreateFooterResponse record {
    # The ID of the created footer.
    string footerId?;
};

# A StructuralElement representing a section break. A section is a range of content that has the same SectionStyle. A section break represents the start of a new section, and the section style applies to the section after the section break. The document body always begins with a section break.
public type SectionBreak record {
    # The style of the section after this section break.
    SectionStyle sectionStyle?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
};

# The contents and style of a cell in a Table.
public type TableCell record {
    # The content of the cell.
    StructuralElement[] content?;
    # The zero-based end index of this cell, exclusive, in UTF-16 code units.
    int:Signed32 endIndex?;
    # The zero-based start index of this cell, in UTF-16 code units.
    int:Signed32 startIndex?;
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
    # The suggested changes to the table cell style, keyed by suggestion ID.
    record {|SuggestedTableCellStyle...;|} suggestedTableCellStyleChanges?;
    # The style of the cell.
    TableCellStyle tableCellStyle?;
};

# The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it's tethered to.
public type PositionedObjectPositioning record {
    # The layout of this positioned object.
    "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED"|"WRAP_TEXT"|"BREAK_LEFT"|"BREAK_RIGHT"|"BREAK_LEFT_RIGHT"|"IN_FRONT_OF_TEXT"|"BEHIND_TEXT" layout?;
    # The offset of the left edge of the positioned object relative to the beginning of the Paragraph it's tethered to. The exact positioning of the object can depend on other content in the document and the document's styling.
    Dimension leftOffset?;
    # The offset of the top edge of the positioned object relative to the beginning of the Paragraph it's tethered to. The exact positioning of the object can depend on other content in the document and the document's styling.
    Dimension topOffset?;
};

# A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type EmbeddedObjectBorderSuggestionState record {
    # Indicates if there was a suggested change to color.
    boolean colorSuggested?;
    # Indicates if there was a suggested change to dash_style.
    boolean dashStyleSuggested?;
    # Indicates if there was a suggested change to property_state.
    boolean propertyStateSuggested?;
    # Indicates if there was a suggested change to width.
    boolean widthSuggested?;
};

# Deletes a NamedRange.
public type DeleteNamedRangeRequest record {
    # The name of the range(s) to delete. All named ranges with the given name will be deleted.
    string name?;
    # The ID of the named range to delete.
    string namedRangeId?;
};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://accounts.google.com/o/oauth2/token";
|};

# A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
public type TableCellBorder record {
    # The color of the border. This color cannot be transparent.
    OptionalColor color?;
    # The dash style of the border.
    "DASH_STYLE_UNSPECIFIED"|"SOLID"|"DOT"|"DASH" dashStyle?;
    # The width of the border.
    Dimension width?;
};

# Deletes bullets from all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
public type DeleteParagraphBulletsRequest record {
    # The range to delete bullets from.
    Range range?;
};

# The document body. The body typically contains the full document contents except for headers, footers, and footnotes.
public type Body record {
    # The contents of the body. The indexes for the body's content begin at zero.
    StructuralElement[] content?;
};

# Styles that apply to a table.
public type TableStyle record {
    # The properties of each column. Note that in Docs, tables contain rows and rows contain cells, similar to HTML. So the properties for a row can be found on the row's table_row_style.
    TableColumnProperties[] tableColumnProperties?;
};

# A document footnote.
public type Footnote record {
    # The contents of the footnote. The indexes for a footnote's content begin at zero.
    StructuralElement[] content?;
    # The ID of the footnote.
    string footnoteId?;
};

# Represents the Queries record for the operation: docsDocumentsBatchupdate
public type DocsDocumentsBatchupdateQueries record {
    # OAuth access token.
    string access_token?;
    # Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    string quotaUser?;
    # V1 error format.
    "1"|"2" \$\.xgafv?;
    # Upload protocol for media (e.g. "raw", "multipart").
    string upload_protocol?;
    # Returns response with indentations and line breaks.
    boolean prettyPrint?;
    # OAuth 2.0 token for the current user.
    string oauth_token?;
    # Data format for response.
    "json"|"media"|"proto" alt?;
    # Legacy upload protocol for media (e.g. "media", "multipart").
    string uploadType?;
    # JSONP
    string callback?;
    # Selector specifying which fields to include in a partial response.
    string fields?;
    # API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    string 'key?;
};

# A single update to apply to a document.
public type Request record {
    # Creates a footer.
    CreateFooterRequest createFooter?;
    # Creates a footnote.
    CreateFootnoteRequest createFootnote?;
    # Creates a header.
    CreateHeaderRequest createHeader?;
    # Creates a named range.
    CreateNamedRangeRequest createNamedRange?;
    # Creates bullets for paragraphs.
    CreateParagraphBulletsRequest createParagraphBullets?;
    # Deletes content from the document.
    DeleteContentRangeRequest deleteContentRange?;
    # Deletes a footer from the document.
    DeleteFooterRequest deleteFooter?;
    # Deletes a header from the document.
    DeleteHeaderRequest deleteHeader?;
    # Deletes a named range.
    DeleteNamedRangeRequest deleteNamedRange?;
    # Deletes bullets from paragraphs.
    DeleteParagraphBulletsRequest deleteParagraphBullets?;
    # Deletes a positioned object from the document.
    DeletePositionedObjectRequest deletePositionedObject?;
    # Deletes a column from a table.
    DeleteTableColumnRequest deleteTableColumn?;
    # Deletes a row from a table.
    DeleteTableRowRequest deleteTableRow?;
    # Inserts an inline image at the specified location.
    InsertInlineImageRequest insertInlineImage?;
    # Inserts a page break at the specified location.
    InsertPageBreakRequest insertPageBreak?;
    # Inserts a section break at the specified location.
    InsertSectionBreakRequest insertSectionBreak?;
    # Inserts a table at the specified location.
    InsertTableRequest insertTable?;
    # Inserts an empty column into a table.
    InsertTableColumnRequest insertTableColumn?;
    # Inserts an empty row into a table.
    InsertTableRowRequest insertTableRow?;
    # Inserts text at the specified location.
    InsertTextRequest insertText?;
    # Merges cells in a table.
    MergeTableCellsRequest mergeTableCells?;
    # Updates the number of pinned header rows in a table.
    PinTableHeaderRowsRequest pinTableHeaderRows?;
    # Replaces all instances of the specified text.
    ReplaceAllTextRequest replaceAllText?;
    # Replaces an image in the document.
    ReplaceImageRequest replaceImage?;
    # Replaces the content in a named range.
    ReplaceNamedRangeContentRequest replaceNamedRangeContent?;
    # Unmerges cells in a table.
    UnmergeTableCellsRequest unmergeTableCells?;
    # Updates the style of the document.
    UpdateDocumentStyleRequest updateDocumentStyle?;
    # Updates the paragraph style at the specified range.
    UpdateParagraphStyleRequest updateParagraphStyle?;
    # Updates the section style of the specified range.
    UpdateSectionStyleRequest updateSectionStyle?;
    # Updates the style of table cells.
    UpdateTableCellStyleRequest updateTableCellStyle?;
    # Updates the properties of columns in a table.
    UpdateTableColumnPropertiesRequest updateTableColumnProperties?;
    # Updates the row style in a table.
    UpdateTableRowStyleRequest updateTableRowStyle?;
    # Updates the text style at the specified range.
    UpdateTextStyleRequest updateTextStyle?;
};

# A ParagraphElement representing an equation.
public type Equation record {
    # The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
    string[] suggestedDeletionIds?;
    # The suggested insertion IDs. An Equation may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
    string[] suggestedInsertionIds?;
};

# An embedded object in the document.
public type EmbeddedObject record {
    # The description of the embedded object. The `title` and `description` are both combined to display alt text.
    string description?;
    # The properties of an embedded drawing.
    EmbeddedDrawingProperties embeddedDrawingProperties?;
    # The border of the embedded object.
    EmbeddedObjectBorder embeddedObjectBorder?;
    # The properties of an image.
    ImageProperties imageProperties?;
    # A reference to the external linked source content. For example, it contains a reference to the source Google Sheets chart when the embedded object is a linked chart. If unset, then the embedded object is not linked.
    LinkedContentReference linkedContentReference?;
    # The bottom margin of the embedded object.
    Dimension marginBottom?;
    # The left margin of the embedded object.
    Dimension marginLeft?;
    # The right margin of the embedded object.
    Dimension marginRight?;
    # The top margin of the embedded object.
    Dimension marginTop?;
    # The visible size of the image after cropping.
    Size size?;
    # The title of the embedded object. The `title` and `description` are both combined to display alt text.
    string title?;
};

# A suggestion state of a NamedStyle message.
public type NamedStyleSuggestionState record {
    # The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
    "NAMED_STYLE_TYPE_UNSPECIFIED"|"NORMAL_TEXT"|"TITLE"|"SUBTITLE"|"HEADING_1"|"HEADING_2"|"HEADING_3"|"HEADING_4"|"HEADING_5"|"HEADING_6" namedStyleType?;
    # A mask that indicates which of the fields in paragraph style have been changed in this suggestion.
    ParagraphStyleSuggestionState paragraphStyleSuggestionState?;
    # A mask that indicates which of the fields in text style have been changed in this suggestion.
    TextStyleSuggestionState textStyleSuggestionState?;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type DocumentStyleSuggestionState record {
    # A mask that indicates which of the fields in background have been changed in this suggestion.
    BackgroundSuggestionState backgroundSuggestionState?;
    # Indicates if there was a suggested change to default_footer_id.
    boolean defaultFooterIdSuggested?;
    # Indicates if there was a suggested change to default_header_id.
    boolean defaultHeaderIdSuggested?;
    # Indicates if there was a suggested change to even_page_footer_id.
    boolean evenPageFooterIdSuggested?;
    # Indicates if there was a suggested change to even_page_header_id.
    boolean evenPageHeaderIdSuggested?;
    # Indicates if there was a suggested change to first_page_footer_id.
    boolean firstPageFooterIdSuggested?;
    # Indicates if there was a suggested change to first_page_header_id.
    boolean firstPageHeaderIdSuggested?;
    # Indicates if there was a suggested change to margin_bottom.
    boolean marginBottomSuggested?;
    # Indicates if there was a suggested change to margin_footer.
    boolean marginFooterSuggested?;
    # Indicates if there was a suggested change to margin_header.
    boolean marginHeaderSuggested?;
    # Indicates if there was a suggested change to margin_left.
    boolean marginLeftSuggested?;
    # Indicates if there was a suggested change to margin_right.
    boolean marginRightSuggested?;
    # Indicates if there was a suggested change to margin_top.
    boolean marginTopSuggested?;
    # Indicates if there was a suggested change to page_number_start.
    boolean pageNumberStartSuggested?;
    # A mask that indicates which of the fields in size have been changed in this suggestion.
    SizeSuggestionState pageSizeSuggestionState?;
    # Indicates if there was a suggested change to use_custom_header_footer_margins.
    boolean useCustomHeaderFooterMarginsSuggested?;
    # Indicates if there was a suggested change to use_even_page_header_footer.
    boolean useEvenPageHeaderFooterSuggested?;
    # Indicates if there was a suggested change to use_first_page_header_footer.
    boolean useFirstPageHeaderFooterSuggested?;
};

# Request message for BatchUpdateDocument.
public type BatchUpdateDocumentRequest record {
    # A list of updates to apply to the document.
    Request[] requests?;
    # Provides control over how write requests are executed.
    WriteControl writeControl?;
};

# The result of replacing text.
public type ReplaceAllTextResponse record {
    # The number of occurrences changed by replacing all text.
    int:Signed32 occurrencesChanged?;
};

# A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
public type Paragraph record {
    # The bullet for this paragraph. If not present, the paragraph does not belong to a list.
    Bullet bullet?;
    # The content of the paragraph, broken down into its component parts.
    ParagraphElement[] elements?;
    # The style of this paragraph.
    ParagraphStyle paragraphStyle?;
    # The IDs of the positioned objects tethered to this paragraph.
    string[] positionedObjectIds?;
    # The suggested changes to this paragraph's bullet.
    record {} suggestedBulletChanges?;
    # The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
    record {} suggestedParagraphStyleChanges?;
    # The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
    record {} suggestedPositionedObjectIds?;
};

# Merges cells in a Table.
public type MergeTableCellsRequest record {
    # The table range specifying which cells of the table to merge. Any text in the cells being merged will be concatenated and stored in the "head" cell of the range. This is the upper-left cell of the range when the content direction is left to right, and the upper-right cell of the range otherwise. If the range is non-rectangular (which can occur in some cases where the range covers cells that are already merged or where the table is non-rectangular), a 400 bad request error is returned.
    TableRange tableRange?;
};

# A single response from an update.
public type Response record {
    # The result of creating a footer.
    CreateFooterResponse createFooter?;
    # The result of creating a footnote.
    CreateFootnoteResponse createFootnote?;
    # The result of creating a header.
    CreateHeaderResponse createHeader?;
    # The result of creating a named range.
    CreateNamedRangeResponse createNamedRange?;
    # The result of inserting an inline image.
    InsertInlineImageResponse insertInlineImage?;
    # The result of inserting an inline Google Sheets chart.
    InsertInlineSheetsChartResponse insertInlineSheetsChart?;
    # The result of replacing text.
    ReplaceAllTextResponse replaceAllText?;
};

# The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
public type NamedStyles record {
    # The named styles. There's an entry for each of the possible named style types.
    NamedStyle[] styles?;
};

# Updates the DocumentStyle.
public type UpdateDocumentStyleRequest record {
    # The styles to set on the document. Certain document style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of DocumentStyle for more information.
    DocumentStyle documentStyle?;
    # The fields that should be updated. At least one field must be specified. The root `document_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the background, set `fields` to `"background"`.
    string fields?;
};

# Inserts an InlineObject containing an image at the given location.
public type InsertInlineImageRequest record {
    # Inserts the text at the end of a header, footer or the document body. Inline images cannot be inserted inside a footnote.
    EndOfSegmentLocation endOfSegmentLocation?;
    # Inserts the image at a specific index in the document. The image must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between the table and its preceding paragraph). Inline images cannot be inserted inside a footnote or equation.
    Location location?;
    # The size that the image should appear as in the document. This property is optional and the final size of the image in the document is determined by the following rules: * If neither width nor height is specified, then a default size of the image is calculated based on its resolution. * If one dimension is specified then the other dimension is calculated to preserve the aspect ratio of the image. * If both width and height are specified, the image is scaled to fit within the provided dimensions while maintaining its aspect ratio.
    Size objectSize?;
    # The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.
    string uri?;
};

# A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type CropPropertiesSuggestionState record {
    # Indicates if there was a suggested change to angle.
    boolean angleSuggested?;
    # Indicates if there was a suggested change to offset_bottom.
    boolean offsetBottomSuggested?;
    # Indicates if there was a suggested change to offset_left.
    boolean offsetLeftSuggested?;
    # Indicates if there was a suggested change to offset_right.
    boolean offsetRightSuggested?;
    # Indicates if there was a suggested change to offset_top.
    boolean offsetTopSuggested?;
};

# A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type ParagraphStyleSuggestionState record {
    # Indicates if there was a suggested change to alignment.
    boolean alignmentSuggested?;
    # Indicates if there was a suggested change to avoid_widow_and_orphan.
    boolean avoidWidowAndOrphanSuggested?;
    # Indicates if there was a suggested change to border_between.
    boolean borderBetweenSuggested?;
    # Indicates if there was a suggested change to border_bottom.
    boolean borderBottomSuggested?;
    # Indicates if there was a suggested change to border_left.
    boolean borderLeftSuggested?;
    # Indicates if there was a suggested change to border_right.
    boolean borderRightSuggested?;
    # Indicates if there was a suggested change to border_top.
    boolean borderTopSuggested?;
    # Indicates if there was a suggested change to direction.
    boolean directionSuggested?;
    # Indicates if there was a suggested change to heading_id.
    boolean headingIdSuggested?;
    # Indicates if there was a suggested change to indent_end.
    boolean indentEndSuggested?;
    # Indicates if there was a suggested change to indent_first_line.
    boolean indentFirstLineSuggested?;
    # Indicates if there was a suggested change to indent_start.
    boolean indentStartSuggested?;
    # Indicates if there was a suggested change to keep_lines_together.
    boolean keepLinesTogetherSuggested?;
    # Indicates if there was a suggested change to keep_with_next.
    boolean keepWithNextSuggested?;
    # Indicates if there was a suggested change to line_spacing.
    boolean lineSpacingSuggested?;
    # Indicates if there was a suggested change to named_style_type.
    boolean namedStyleTypeSuggested?;
    # Indicates if there was a suggested change to page_break_before.
    boolean pageBreakBeforeSuggested?;
    # A mask that indicates which of the fields in shading have been changed in this suggestion.
    ShadingSuggestionState shadingSuggestionState?;
    # Indicates if there was a suggested change to space_above.
    boolean spaceAboveSuggested?;
    # Indicates if there was a suggested change to space_below.
    boolean spaceBelowSuggested?;
    # Indicates if there was a suggested change to spacing_mode.
    boolean spacingModeSuggested?;
};

# Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
public type EndOfSegmentLocation record {
    # The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
    string segmentId?;
};

# Properties specific to a RichLink.
public type RichLinkProperties record {
    # Output only. The [MIME type](https://developers.google.com/drive/api/v3/mime-types) of the RichLink, if there's one (for example, when it's a file in Drive).
    string mimeType?;
    # Output only. The title of the RichLink as displayed in the link. This title matches the title of the linked resource at the time of the insertion or last update of the link. This field is always present.
    string title?;
    # Output only. The URI to the RichLink. This is always present.
    string uri?;
};

# A mask that indicates which of the fields on the base LinkedContentReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
public type LinkedContentReferenceSuggestionState record {
    # A mask that indicates which of the fields in sheets_chart_reference have been changed in this suggestion.
    SheetsChartReferenceSuggestionState sheetsChartReferenceSuggestionState?;
};

# A border around a paragraph.
public type ParagraphBorder record {
    # The color of the border.
    OptionalColor color?;
    # The dash style of the border.
    "DASH_STYLE_UNSPECIFIED"|"SOLID"|"DOT"|"DASH" dashStyle?;
    # The padding of the border.
    Dimension padding?;
    # The width of the border.
    Dimension width?;
};

# Contains properties describing the look and feel of a list bullet at a given level of nesting.
public type NestingLevel record {
    # The alignment of the bullet within the space allotted for rendering the bullet.
    "BULLET_ALIGNMENT_UNSPECIFIED"|"START"|"CENTER"|"END" bulletAlignment?;
    # The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.
    string glyphFormat?;
    # A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.
    string glyphSymbol?;
    # The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
    "GLYPH_TYPE_UNSPECIFIED"|"NONE"|"DECIMAL"|"ZERO_DECIMAL"|"UPPER_ALPHA"|"ALPHA"|"UPPER_ROMAN"|"ROMAN" glyphType?;
    # The amount of indentation for the first line of paragraphs at this level of nesting.
    Dimension indentFirstLine?;
    # The amount of indentation for paragraphs at this level of nesting. Applied to the side that corresponds to the start of the text, based on the paragraph's content direction.
    Dimension indentStart?;
    # The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.
    int:Signed32 startNumber?;
    # The text style of bullets at this level of nesting.
    TextStyle textStyle?;
};

# A particular location in the document.
public type Location record {
    # The zero-based index, in UTF-16 code units. The index is relative to the beginning of the segment specified by segment_id.
    int:Signed32 index?;
    # The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
    string segmentId?;
};
