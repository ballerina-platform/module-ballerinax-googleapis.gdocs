// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.
// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License. 

import ballerina/log;
import ballerina/os;
import ballerina/test;

configurable string refreshToken = os:getEnv("REFRESH_TOKEN");
configurable string clientId = os:getEnv("CLIENT_ID");
configurable string clientSecret = os:getEnv("CLIENT_SECRET");

//---------------DO NOT change the following variables-----------------------//
//---------------Used in multiple tests-----------------------//
string createdDocumentId = "";

ConnectionConfig gdocsConfig = {
    auth: {
        refreshToken,
        clientId,
        clientSecret
    }
};

Client gdocsClient = test:mock(Client);

@test:BeforeGroups {
    value: ["gdocs"]
}
function initializeClientsForgdocsServer() returns error? {
    log:printInfo("Initializing client for gdocs server");
    gdocsClient = check new (gdocsConfig);
}

@test:Config {
    groups: ["gdocs"]
}
function testCreateDocument() returns error? {
    Document payload = {
        "title": "Programmatic Document Creation Example"
    };
    Document createdDoc = check gdocsClient->docsDocumentsCreate(payload);
    createdDocumentId = createdDoc.documentId ?: "";
    test:assertEquals(createdDoc.title, payload.title, msg = "Document title should match the request title.");
}

@test:Config {dependsOn: [testCreateDocument], groups: ["gdocs"]}
function testBatchUpdateDocumentPreviousDocument() returns error? {
    BatchUpdateDocumentRequest updateRequest = {
        requests: [
            {insertText: {location: {index: 1}, text: "Hello, World!"}},
            {updateTextStyle: {range: {startIndex: 1, endIndex: 13}, textStyle: {bold: true}, fields: "bold"}}
        ]
    };
    BatchUpdateDocumentResponse response = check gdocsClient->docsDocumentsBatchupdate(createdDocumentId, updateRequest);
    Response[]? replies = response.replies;
    test:assertTrue(replies.count() > 0, msg = "The response should contain at least one update reply.");
}

@test:Config {groups: ["gdocs"]}
function testBatchUpdateDocumentNewDocument() returns error? {
    Document createdDoc = check gdocsClient->docsDocumentsCreate({"title": "Batch Update Document"});
    string documentId = createdDoc.documentId ?: "";

    BatchUpdateDocumentRequest updateRequest = {
        requests: [
            {insertText: {location: {index: 1}, text: "Hello, World!"}},
            {updateTextStyle: {range: {startIndex: 1, endIndex: 13}, textStyle: {bold: true}, fields: "bold"}}
        ]
    };
    BatchUpdateDocumentResponse response = check gdocsClient->docsDocumentsBatchupdate(documentId, updateRequest);
    Response[]? replies = response.replies;
    test:assertTrue(replies.count() > 0, msg = "The response should contain at least one update reply.");
}

// Test case to handle errors in document creation.
@test:Config {groups: ["gdocs"]}
function testCreateDocumentWithInvalidPayload() returns error? {
    Document payload = {"title": "Payload with unsupported field", "unsupportedField": "This field is not recognized"};
    var result = gdocsClient->docsDocumentsCreate(payload);

    if result is error {
        test:assertTrue(true, msg = "Received an error as expected for invalid request payload.");
    } else {
        test:assertFail(msg = "Expected an error for invalid request payload, but received a Document.");
    }
}

@test:Config {dependsOn: [testCreateDocument], groups: ["gdocs"]}
function testGetDocumentWithValidId() returns error? {
    var retrievedDocument = gdocsClient->docsDocumentsGet(createdDocumentId);
    if (retrievedDocument is Document) {
        test:assertEquals(retrievedDocument.title, "Programmatic Document Creation Example", msg = "The document title does not match.");
    } else {
        test:assertFail(msg = "Expected a document but got an error: " + retrievedDocument.message());
    }
}

@test:Config {groups: ["gdocs"]}
function testGetDocumentWithInvalidId() returns error? {
    string invalidDocumentId = "12334567788";
    var retrievedDocument = gdocsClient->docsDocumentsGet(invalidDocumentId);
    if (retrievedDocument is error) {
        test:assertTrue(retrievedDocument is error, msg = "Expected a document but got an error: " + retrievedDocument.message());
    } else {
        test:assertFail(msg = "Expected an error but got a document with documentId: " + (retrievedDocument.documentId ?: ""));
    }
}
